package {    import flash.display.MovieClip;    import flash.net.URLLoader;    import flash.net.URLRequest;    import flash.events.*;    import flash.text.TextField;    public class CustomKeyboard extends MovieClip {        static var keyData:XML = new XML;// used to store the loaded XML data.        static var keyHolder:MovieClip = new MovieClip;// used to hold all the buttons        static var textScreen:TextField = new TextField;// Our textfield that we write to.		static var textScreen2:TextField = new TextField;// Our textfield that we write to.        static var shift:Boolean = false;// Tells if the shift key is down.        static var caps:Boolean = false;// Tells if the Caps Loack key is down.        public function CustomKeyboard() {            buildTextScreen();            loadKeyboardinfo();            setupKeyHolder();			        }        static public function capsToggle():void {            if (caps) {                caps = false;            } else {                caps = true;            }        }        static public function shiftToggle():void {            if (shift) {                shift = false;            } else {                shift = true;            }            if (caps) {                caps = false;            }        }						 								        private function buildTextScreen():void {                      textScreen.width = 640;// width of the textScreen            textScreen.height = 30;// height of the textScreen            textScreen.htmlText = "";//            textScreen.wordWrap = true;// makes the textScreen wrap text to a newline once it reaches the end.            textScreen.selectable = false;// restricts teh user from being able to select the text in textScreen            textScreen.border = true;// draws a border around the textScreen           // adds the textScreen to the main stage        }        private function loadKeyboardinfo():void {            var xmlLoader:URLLoader = new URLLoader;// creates a loader to load the xml data.            var xmlRequester:URLRequest = new URLRequest("xml/keys.xml");// this request object is used to tell the loader what and where to load.            xmlLoader.addEventListener(Event.COMPLETE,xmlLoaded);// adds an event listener that fires once the loader has completed loading the xml file.            xmlLoader.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);// this event listener fires if there is a problem finding or loading the xml file.            xmlLoader.load(xmlRequester);// starts the loading of the xml file.        }        private function setupKeyHolder():void {            keyHolder.x = 20;// positions the keyHolder movieclip on the main stage.            keyHolder.y = 200;// positions the keyHolder movieclip on the main stage.            addChild(keyHolder);// adds the keyHolder movieclip to the main stage.        }        private function buildKeyboard():void {            var numKeys:Number = getNumberOfKeys();// uses a function to find out how many keys are in the XML file.            var xPlacement:Number = 0;// used to position the keys in the keyHolder movieclip.            for (var i = 0; i < keyData.row.length(); i++) {// loop used to draw each row.                for (var j = 0; j < keyData.row[i].key.length(); j++) {// loop used to draw all the keys in a row.                    var newKey:KeyButton = new KeyButton;// creates a new instance of the KeyButton class ( our onscreen button ).                    newKey.code = keyData.row[i].key[j].code;// sets the newKey's code variable to the appropriate XML node value for that key.                    newKey.char = keyData.row[i].key[j].char;// sets the newKey's char variable to the appropriate XML node value for that key.                    newKey.shiftChar = keyData.row[i].key[j].shiftChar;// sets the newKey's shiftChar variable to the appropriate XML node value for that key.                    newKey.keyWidth = checkWidth(keyData.row[i].key[j].char);// uses a function to determine the width of the key.                    newKey.x = xPlacement + 5;// used to position the key on the x (up and down).                    newKey.y = (newKey.keyHeight + 5) * i;// used to position the key on the y ( left and right ).                    newKey.build();// calls a function that is inside the newKey object. More info in KeyButton.as                    xPlacement += newKey.keyWidth+ 5;// sets the xPlacement variable for the next pass through the loop.                    keyHolder.addChild(newKey);// adds the newKey to the keyHolder movieclip. The keyHolder is already on the stage by now so the key will display.                }                xPlacement = 0;// resets the x postions once a row has been drawn so the next row starts where it is suppose to.            }        }        private function checkWidth(char:String):Number {            var mediumKeys:Array = new Array('Tab','Enter','Backspace','Caps Lock');            var shiftKey:String = "Shift";            var spaceKey:String = "Space Bar";            for (var m = 0; m < mediumKeys.length; m++) {                if (char == mediumKeys[m]) {                    return 75;                }            }            if (char == shiftKey) {                return 95;            }            if (char == spaceKey) {                return keyHolder.width;            }            return 35;        }        private function getNumberOfKeys():Number {            var keyCounter:Number = 0;            for (var i = 0; i < keyData.row.length(); i++) {                keyCounter += keyData.row[i].key.length();            }            return keyCounter;        }        private function ioErrorHandler(event:IOErrorEvent):void {            trace("ioErrorHandler: " + event);// if the loader fails to load the XML file this will trace out the error.        }        private function xmlLoaded(event:Event):void {            var loader:URLLoader=URLLoader(event.target);// must have            keyData = new XML(loader.data);// takes the loaded XML data and puts it in to our XML object.            buildKeyboard();/// since the XML is loaded we now can build the keyboard since it requires the XML data.        }    }}