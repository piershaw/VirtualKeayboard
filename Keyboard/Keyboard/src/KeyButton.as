package {    import flash.display.MovieClip;    import flash.display.Graphics;    import flash.text.TextField;    import flash.text.TextFieldAutoSize;    import flash.text.TextFormat;    import flash.events.*;    public class KeyButton extends MovieClip {        public var keyWidth:uint = new uint;        public var keyHeight:uint = new uint;        public var code:uint = new uint;        public var char:String = new String;        public var shiftChar:String= new String;        public var keyColor:uint= new uint;        public var charColor:uint= new uint;        public var lineColor:uint= new uint;        public var charTextField:TextField = new TextField;        public var shiftCharTextField:TextField = new TextField;        private var charFormat:TextFormat = new TextFormat();        private var backGround:MovieClip = new MovieClip;        public function KeyButton() {            // Setup the default for the variables.            keyWidth = 25;            keyHeight = 35;            code = 0;            char = '';            shiftChar = '';            keyColor = 0xCCCCCC;            charColor = 0x000000;            lineColor = 0x888888;            addEventListener(MouseEvent.CLICK, clicked);            addEventListener(MouseEvent.MOUSE_OVER, hover);            addEventListener(MouseEvent.MOUSE_OUT, leave);            addEventListener(Event.ENTER_FRAME, checkStatus);                        addChild(backGround);        }        public function build():void {            defaultState();            addTextFields();            CustomKeyboard.textScreen.text = "";			CustomKeyboard.textScreen2.text = "";        }        private function reDraw(mouseStatus:String = ''):void {            if (char == "Shift") {                if (CustomKeyboard.shift) {                    hoverState();                } else {                    defaultState();                }            } else if (char == "Caps Lock") {                if (CustomKeyboard.caps) {                    hoverState();                } else {                    defaultState();                }            } else {                if (mouseStatus == "over") {                    hoverState();                } else if (mouseStatus == "out") {                    defaultState();                }            }        }        private function hoverState() {            backGround.graphics.clear();            backGround.graphics.beginFill(keyColor-0x222222,1);            backGround.graphics.lineStyle(0, lineColor-0x222222, 1, true);            backGround.graphics.drawRect(0, 0, keyWidth, keyHeight);            backGround.graphics.endFill();        }        private function defaultState() {            backGround.graphics.clear();            backGround.graphics.beginFill(keyColor,1);            backGround.graphics.lineStyle(0, lineColor, 1, true);            backGround.graphics.drawRect(0, 0, keyWidth, keyHeight);            backGround.graphics.endFill();        }        private function addTextFields():void {            charFormat.font = "Verdana";            charFormat.color = charColor;            charFormat.size = 12;            charTextField.width = keyWidth;            charTextField.y = 15;            charTextField.htmlText = char;            charTextField.setTextFormat(charFormat);            charTextField.autoSize = TextFieldAutoSize.CENTER;            charTextField.selectable = false;            charTextField.mouseEnabled = false;            charFormat.size = 10;            shiftCharTextField.width = keyWidth/2;            shiftCharTextField.text = shiftChar;            shiftCharTextField.setTextFormat(charFormat);            shiftCharTextField.autoSize = TextFieldAutoSize.CENTER;            shiftCharTextField.selectable = false;            shiftCharTextField.mouseEnabled = false;            addChild(charTextField);            addChild(shiftCharTextField);        }				//// pier mod												/////		        private function addText(string:String, shiftString:String) {            if (CustomKeyboard.shift) {                CustomKeyboard.textScreen.appendText(shiftString);                CustomKeyboard.shift = false;            } else if (CustomKeyboard.caps) {                CustomKeyboard.textScreen.appendText(shiftString);            } else {                CustomKeyboard.textScreen.appendText(string);            }        }						        private function clicked(event:MouseEvent):void {            switch (char) {                case "Space Bar" :                    CustomKeyboard.textScreen.appendText(" ");                    break;                case "Tab" :                    CustomKeyboard.textScreen.appendText("\t");                    break;                case "Backspace" :                    CustomKeyboard.textScreen.replaceText(CustomKeyboard.textScreen.text.length-1, CustomKeyboard.textScreen.text.length,'');                    break;                case "Enter" :                    CustomKeyboard.textScreen.appendText("\n");                    break;                case "Shift" :                    CustomKeyboard.shiftToggle();                    break;                case "Caps Lock" :                    CustomKeyboard.capsToggle();                    CustomKeyboard.shift = false;                    break;                default :                    addText(char, shiftChar);            }        }        private function checkStatus(event:Event) {            reDraw();        }        private function hover(event:MouseEvent) {            reDraw("over");        }        private function leave(event:MouseEvent) {            reDraw("out");        }    }}